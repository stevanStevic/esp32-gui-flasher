name: Build & Release Windows EXE

on:
  workflow_dispatch:

permissions:
  contents: write # Ensure GitHub Actions can create releases

jobs:
  build-windows:
    name: Build and Release ESP32-Flasher
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all tags for versioning
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements_build.txt -r requirements.txt -r requirements_win.txt
          pip uninstall -y esptool
          pip install git+https://github.com/espressif/esptool.git@v4.8.1

      - name: Find esptool path and copy stub_flasher
        id: find-esptool
        run: |
          $esptoolPath = python -c "import esptool, os; print(os.path.dirname(esptool.__file__))"
          echo "Found esptool at $esptoolPath"
          mkdir -Force .\esp_flasher\esptool\stub_flasher
          copy "$esptoolPath\stub_flasher\*" ".\esp_flasher\esptool\stub_flasher\" -Recurse -Force

      - name: Build executable with PyInstaller
        run: |
          python -m PyInstaller.__main__ -F -w -n ESP32-Flasher -i icon.ico ^
            --hidden-import pywin32 ^
            --add-data "esp_flasher\esptool\stub_flasher;esptool/stub_flasher" ^
            esp_flasher\__main__.py

      - name: Create config folder in dist and copy config.json
        run: |
          mkdir dist\config
          copy config\config.json dist\config\config.json

      - name: Create ZIP package
        run: |
          powershell Compress-Archive -Path dist\ESP32-Flasher.exe, dist\config\ -DestinationPath dist\ESP32-Flasher-Windows.zip

      - name: Determine release version
        id: version
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest-$(git rev-parse --short HEAD)")
          echo "release_version=$TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload artifact (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ESP32-Flasher-Windows-ZIP
          path: dist/ESP32-Flasher-Windows.zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.release_version }}
          name: ESP32-Flasher ${{ steps.version.outputs.release_version }}
          files: dist/ESP32-Flasher-Windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
